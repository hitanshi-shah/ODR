pipeline{
     agent {
       docker {
             image 'harimaumalaya:v0.0.1j'
             label 'docker'
             registryUrl 'https://046099537821.dkr.ecr.us-east-1.amazonaws.com'
	      
	           args '-u root'
	          reuseNode true

       }
   }
    parameters {
    
         choice(name: 'Automation' , choices: ['Update_linuxapp' , 'Uninstall_linuxapp' , 'Uninstall_windowsapp' , 'ConfigUpdateRegedit' , 'Microsoft.Net_Kb_installation' , 'msi_installation' , 'exe_installation'] , description : 'select the parameter for which variable file needs to be updated')
         
	
	}

   stages {
      stage('Install Ansible'){
          steps{
		        script{  
                  sh """
		                apt-get update
                    apt-get install -y ansible
                    pip install boto3
                    ls -ltr /usr/bin/*
                    ansible --version
                    which pip
                    which python
                    python3 -m pip install boto3
		                pwd
	                  ls -ltr
                    """
            }
	    }
     }
       
      
       
        stage('UpdateVariable.yml for updation') {
          when { expression { params.Automation == 'Update_linuxapp' } } 
            steps {
                script {          
		              String tasks = params.Tasks
            String[] taskValues = tasks.split(",")
            String qualys_id = taskValues[0].trim()
            String package_app = taskValues[1].trim()
            String new_version = taskValues[2].trim()
            String list_installed_command = taskValues[3].trim()
            String update_command = taskValues[4].trim()
            String verify_command = taskValues[5].trim()

            // Debug print to verify extracted values
            println "qualys_id: ${qualys_id}"
            println "package_app: ${package_app}"
            println "new_version: ${new_version}"
            println "list_installed_command: ${list_installed_command}"
            println "update_command: ${update_command}"
            println "verify_command: ${verify_command}"
                                
            sh """
                ls -lart
                ansible-playbook -i inventory UpdateVariable.yml \
                -e "qualys_id=${qualys_id}" \
                -e "package_app=${package_app}" \
                -e "new_version=${new_version}" \
                -e "list_installed_command=${list_installed_command}" \
                -e "update_command=${update_command}" \
                -e "verify_command=${verify_command}"
                pwd
		ls -lart /jenkins/work
            """
                                
                      }
                  }
           }

        stage('UpdateVariable.yml for uninstallation') {
          when { expression { params.Automation == 'Uninstall_linuxapp' } } 
            steps {
                script {           
		
		          String tasks = params.Tasks
                          String[] taskValues = tasks.split(",")
                          String qualys_id = taskValues[0].trim()
                          String app_location_version = taskValues[1].trim()
                          String application = taskValues[2].trim()
                          String version_command = taskValues[3].trim()
                          String uninstall_command = taskValues[4].trim()
                          String check_path_command = taskValues[5].trim()
			  
                          sh """ 
                          ansible-playbook -i inventory UpdateVariable.yml \
                          -e "qualys_id=${qualys_id}" \
                          -e "app_location_version=${app_location_version}" \
                          -e "application=${application}" \
                          -e "version_command=${version_command}" \
                          -e "uninstall_command=${uninstall_command}" \
                          -e "check_path_command=${check_path_command}"
                           ls -lart
	                   pwd
                          """
                      }
                  }
           }   
        
         stage('UpdateVariable.yml for msi_installation') {
          when { expression { params.Automation == 'msi_installation' } } 
            steps {
                script {           
		
		                 String tasks = params.Tasks
                          String[] taskValues = tasks.split(",")
                          String qualys_id = taskValues[0].trim()
                          String msi_version = taskValues[1].trim()
                          String driver_name = taskValues[2].trim()
                          String download_path = taskValues[3].trim()
                          String check_command = taskValues[4].trim()
			  String install_command = taskValues[5].trim()
			  
                          sh """
                          ansible-playbook -i inventory UpdateVariable.yml \
                          -e "qualys_id=${qualys_id}" \
                          -e "msi_version=${msi_version}" \
                          -e "driver_name=${driver_name}" \
                          -e "download_path=${download_path}" \
                          -e "check_command=${check_command}" \
			  -e "install_command=${install_command}" 
                           ls -lart
	                   pwd
                          """
                      }
                  }
           }
	   
	   stage('UpdateVariable.yml for exe_installation') {
          when { expression { params.Automation == 'exe_installation' } } 
            steps {
                script {           
		
		                 String tasks = params.Tasks
                          String[] taskValues = tasks.split(",")
                          String qualys_id = taskValues[0].trim()
                          String exe_version = taskValues[1].trim()
                          String driver_name = taskValues[2].trim()
                          String download_path = taskValues[3].trim()
                          String check_command = taskValues[4].trim()
			  String install_command = taskValues[5].trim()
			  
                          sh """
                          ansible-playbook -i inventory UpdateVariable.yml \
                          -e "qualys_id=${qualys_id}" \
                          -e "exe_version=${exe_version}" \
                          -e "driver_name=${driver_name}" \
                          -e "download_path=${download_path}" \
                          -e "check_command=${check_command}" \
			  -e "install_command=${install_command}" 
                           ls -lart
	                   pwd
                          """
                      }
                  }
           } 
        stage('UpdateVariable.yml for uninstallation of windows application') {
          when { expression { params.Automation == 'Uninstall_windowsapp' } } 
            steps {
                script {           
		
		          String tasks = params.Tasks
                          String[] taskValues = tasks.split(",")
                          String qualys_id = taskValues[0].trim()
                          String application_name_or_path = taskValues[1].trim()
                          String uninstall_command = taskValues[2].trim()
                          String check_command = taskValues[3].trim()
			  
                          sh """ 
                          ansible-playbook -i inventory UpdateVariable.yml \
                          -e "qualys_id=${qualys_id}" \
                          -e "application_name_or_path=${application_name_or_path}" \
                          -e "uninstall_command=${uninstall_command}" \
                          -e "check_command=${check_command}" 
                           ls -lart
	                       pwd
                          """
                      }
                  }
           } 
        stage('UpdateVariable.yml for Installation of windows') {
          when { expression { params.Automation == 'Microsoft.Net_Kb_installation' } } 
            steps {
                script {           
		
		          String tasks = params.Tasks
            String[] taskValues = tasks.split(",")
            String qualys_id = taskValues[0].trim()
            String kb_number = taskValues.drop(1).collect { it.trim() }.join(",")
	
            
                          sh """ 
                          ansible-playbook -i inventory UpdateVariable.yml \
                          -e "qualys_id=${qualys_id}" \
                          -e "kb_number=${kb_number}" 
                          ls -lart
	                        pwd
                          """
                      //}
                  }
		}  
           } 
        
	stage('UpdateVariable.yml for updating the registry') {
    when { 
        expression { params.Automation == 'ConfigUpdateRegedit' } 
    } 
    steps {
        script {           
            String tasks = params.Tasks

            // Splitting by comma only when it's not enclosed in quotes
            def taskValues = tasks.findAll(/(?:"[^"]*"|[^,])+/) { it.trim().replaceAll(/^"|"$/, '') }

            String qualys_id = taskValues[0]
            // Extracting registry_base_path values
            def registry_base_paths = taskValues.drop(1).findAll { it.startsWith("HKLM") }

            // Joining the registry_base_path values with a comma
            String registry_base_path = registry_base_paths.join(",")

            // Extracting tls_settings
            String tls_settings = taskValues.drop(1).findAll { !it.startsWith("HKLM") }.join(", ")

            echo "qualys_id: $qualys_id"
            echo "registry_base_path: $registry_base_path"
            echo "tls_settings: $tls_settings"

            sh """ 
            ansible-playbook -i inventory UpdateVariable.yml \
            -e "qualys_id=${qualys_id}" \
            -e "registry_base_path=${registry_base_path}" \
            -e "tls_settings='${tls_settings}'"
            ls -lart
            pwd
            """
        }
    }
}




	 }
} 
    
